import React from "react";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import styles from "../../styles/Home.module.css";
import InfiniteScroll from "react-infinite-scroll-component";
import { useState, useEffect } from "react";
import EachBlog from "../../components/EachBlog";

const Slug = ({ blogData, headers, numberofBlogs }) => {
  const router = useRouter();
  const { slug } = router.query;

  // console.log(blogData);

  const [posts, setPosts] = useState(blogData);

  // console.log(posts);

  const [hasMore, setHasMore] = useState(true);

  const getMorePosts = async () => {
    const res = await fetch(
      `${process.env.NEXT_PUBLIC_STRAPI_URL}/api/blog-posts?pagination[start]=${posts.length}&pagination[limit]=5&sort=createdAt%3Adesc&populate=blogImg&populate=author&populate=categories`,
      {
        headers: headers,
      }
    );

    const dataPosts = await res.json();

    const newPosts = dataPosts.data;

    setTimeout(() => {
      setPosts((posts) => [...posts, ...newPosts]);
    }, 2000);
  };

  useEffect(() => {
    setHasMore(numberofBlogs > posts.length ? true : false);
  }, [posts]);

  return (
    <div>
      <Head>
        <title>AniLog - {slug}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto sm:p-8 p-2 mb-16">
        <h1 className="text-3xl font-bangers text-neutral-content border-b-4 border-error w-fit tracking-wider mb-4">
          Search Results
        </h1>
        {posts.length === 0 ? (
          <p className="text-center font-bangers text-xl text-error-content">
            No Search Results Found
          </p>
        ) : (
          <section className={styles.home_grid}>
            <InfiniteScroll
              dataLength={posts.length}
              next={getMorePosts}
              hasMore={hasMore}
              loader={<img src="/loader.gif" />}
              endMessage={
                <p className="text-center">
                  <b>Yay! You have seen it all</b>
                </p>
              }
            >
              {posts.map((eachBlog) => {
                return (
                  <Link
                    href={`/blogpost/${eachBlog.attributes.slug}`}
                    key={eachBlog.id}
                  >
                    <div className="w-5/6 mx-auto lg:w-full">
                      <EachBlog eachBlog={eachBlog} />
                    </div>
                  </Link>
                );
              })}
            </InfiniteScroll>
          </section>
        )}
      </main>
    </div>
  );
};

export async function getServerSideProps(context) {
  let navCategories;
  let blogData;
  let numberofBlogs;
  let headers = {
    Authorization: `Bearer ${process.env.BEARER_TOKEN}`,
  };

  try {
    const [res1, res2] = await Promise.all([
      fetch(`${process.env.NEXT_PUBLIC_STRAPI_URL}/api/categories`, {
        headers: headers,
      }),
      fetch(
        `${process.env.NEXT_PUBLIC_STRAPI_URL}/api/blog-posts?pagination[limit]=17&sort=createdAt%3Adesc&populate=blogImg&populate=author&populate=categories&filters[title]=${context.query.slug}`,
        {
          headers: headers,
        }
      ),
    ]);
    const [json1, json2] = await Promise.all([res1.json(), res2.json()]);
    navCategories = json1.data;
    blogData = json2.data;
    numberofBlogs = json2.meta.pagination.total;
  } catch (error) {
    throw new Error(error);
  }

  return {
    props: { navCategories, blogData, headers, numberofBlogs }, // will be passed to the page component as props
  };
}

export default Slug;
